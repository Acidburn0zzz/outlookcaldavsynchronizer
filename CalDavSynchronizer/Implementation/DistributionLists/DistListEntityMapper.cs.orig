// This file is Part of CalDavSynchronizer (http://outlookcaldavsynchronizer.sourceforge.net/)
// Copyright (c) 2015 Gerhard Zehetbauer
// Copyright (c) 2015 Alexander Nimmervoll
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using CalDavSynchronizer.Contracts;
using CalDavSynchronizer.DataAccess;
using CalDavSynchronizer.Implementation.ComWrappers;
using GenSync.EntityMapping;
using GenSync.Logging;
using log4net;
using Microsoft.Office.Interop.Outlook;
using Thought.vCards;
using Exception = System.Exception;


namespace CalDavSynchronizer.Implementation.DistributionLists
{
  public class DistListEntityMapper : IEntityMapper<GenericComObjectWrapper<DistListItem>, DistributionList>
  {
    public Task<DistributionList> Map1To2(GenericComObjectWrapper<DistListItem> source, DistributionList target, IEntityMappingLogger logger)
    {
      target.Members.Clear();
      target.Name = source.Inner.DLName;

      for (int i = 0; i < source.Inner.MemberCount; i++)
      {

        using (var recipientWrapper = GenericComObjectWrapper.Create(source.Inner.GetMember(i)))
        using (var addressEntryWrapper = GenericComObjectWrapper.Create(recipientWrapper.Inner.AddressEntry))
        using (var contactWrapper = GenericComObjectWrapper.Create(addressEntryWrapper.Inner.GetContact()))
        {
          var serverFileName = context.GetServerFileNameOutlookContactIdByOrNull(contactWrapper.Inner.EntryID);
          if (serverFileName != null)
          {
            target.Members.Add(new DistributionListMember {FileName = serverFileName});
          }
          else
          {
            logger.LogMappingError($"Could not translate contact '${contactWrapper.Inner.EntryID}' to server file name.");
          }
        }

      }

      return Task.FromResult(target);
    }

<<<<<<< HEAD
    public Task<GenericComObjectWrapper<DistListItem>> Map2To1(DistributionList source, GenericComObjectWrapper<DistListItem> target, IEntityMappingLogger logger)
=======
    public async Task<GenericComObjectWrapper<DistListItem>> Map2To1(DistributionList source, GenericComObjectWrapper<DistListItem> target, IEntityMappingLogger logger, DistributionListSychronizationContext context)
>>>>>>> 267da0a... imp
    {
      for (int i = 0; i < target.Inner.MemberCount; i++)
      {
        using (var recipientWrapper = GenericComObjectWrapper.Create(target.Inner.GetMember(i)))
        {
          target.Inner.RemoveMember(recipientWrapper.Inner);
        }
      }

      target.Inner.DLName = source.Name;

      foreach (var sourceMember in source.Members)
      {
        var contactId = context.GetOutlookContactIdByServerFileNameOrNull(sourceMember.FileName);
        if (contactId != null)
        {
          var contact = await context.GetOutlookContact(contactId);
          target.Inner.AddMember(Globals.ThisAddIn.Application.Application.Session.CreateRecipient(contact.Inner.Email1Address));

        }
        else
        {
          logger.LogMappingError($"Could not translate server file name '${sourceMember.FileName}' to contact id.");
        }
      }

      return target;
    }
  }
}